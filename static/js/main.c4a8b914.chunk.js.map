{"version":3,"sources":["drizzleOptions.js","reducers/todos.js","reducers/contractMetadataReducer.js","store.js","middleware/index.js","components/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["options","web3","block","fallback","type","url","contracts","events","BaseCollude","polls","accounts","fetchTodos","appRootSaga","TODOS_FETCH","TODOS_RECEIVED","fetch","then","response","json","todos","put","takeEvery","initialState","contractMetadataReducer","state","action","contractName","contractMetadata","rest","console","log","drizzleOptions","config","appReducers","appSagas","appMiddlewares","store","next","EventActions","EVENT_FIRED","contract","name","contractEvent","event","contractMessage","returnValues","_message","display","disableReduxDevTools","generateStore","drizzle","Drizzle","styles","newContextComponents","ContractData","Navbar","backgroundColor","paddingLeft","color","fontStyle","About","padding","Contracts","GetStarted","Bounties","a","cellBreakWord","wordWrap","maxWidth","BountyCreateForm","handleCreateDeal","initialValues","_beneficiary","_bounty","_expiryBlock","_targetContract","_targetCallData","_targetResponse","validate","values","onSubmit","setSubmitting","isSubmitting","FormGroup","placeholder","as","Input","Button","disabled","BountyTable","deals","handleSettleDeal","handleRefundDeal","blockNumber","Table","style","width","borderCollapse","dark","map","deal","idx","expired","expiryBlock","key","scope","settled","creator","targetContract","targetCallData","targetResponse","bounty","value","onClick","HomeAbout","HomeContracts","Row","Col","href","Home","currentBlock","className","expand","Container","fluid","xs","sm","methods","createDeal","send","on","hash","preventDefault","dealIdx","parseInt","target","settleDeal","refundDeal","number","drizzleReactHooks","useDrizzle","useCacheCall","drizzleState","useDrizzleState","drizzleStatus","eth","getBlockNumber","getBlock","dispatch","call","dealsCount","Array","keys","_","App","DrizzleProvider","Initializer","error","loadingContractsAndAccounts","loadingWeb3","Suspense","path","render","props","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4a8b914.chunk.js","sourcesContent":["import BaseCollude from \"./contracts/BaseCollude.json\"\n//import SimpleColludeAdapter from \"./contracts/SimpleColludeAdapter.json\"\n\nconst options = {\n  web3: {\n    block: false,\n    fallback: {\n      type: \"ws\",\n      url: \"ws://127.0.0.1:7545\"\n    }\n  },\n  contracts: [BaseCollude],\n  events: {\n    BaseCollude: [\"CollusionDealCreated\", \"CollusionDealSettled\", \"CollusionDealRefunded\"]\n  },\n  polls: {\n    accounts: 1500\n  }\n}\n\nexport default options\n","import { put, takeEvery } from \"redux-saga/effects\"\n\n// actions\nconst TODOS_FETCH = \"MY_APP/TODOS_FETCH\"\nconst TODOS_RECEIVED = \"MY_APP/TODOS_RECEIVED\"\n\n// reducers\nexport const todosReducer = (state = [], action) => {\n  if (action.type === TODOS_RECEIVED) {\n    // update your state\n    return action.todos\n  }\n  return state\n}\n\n// fetch data from service using sagas\nexport function* fetchTodos() {\n  const todos = yield fetch(\"https://jsonplaceholder.typicode.com/todos\").then(\n    response => response.json()\n  )\n  yield put({ type: TODOS_RECEIVED, todos })\n}\n\n// Combine all your redux concerns\n\n// app root saga\nexport function* appRootSaga() {\n  yield takeEvery(TODOS_FETCH, fetchTodos)\n}\n","// actions\nconst ADD_CONTRACT_METADATA = \"ADD_CONTRACT_METADATA\"\nconst DELETE_CONTRACT_METADATA = \"DELETE_CONTRACT_METADATA\"\nconst SET_CONTRACT_METADATA = \"SET_CONTRACT_METADATA\"\n\nconst initialState = {}\n\n// reducers\nexport const contractMetadataReducer = (state = initialState, action) => {\n  if (action.type === ADD_CONTRACT_METADATA) {\n    return {\n      ...state,\n      [action.contractName]: action.contractMetadata\n    }\n  }\n\n  if (action.type === DELETE_CONTRACT_METADATA) {\n    const { [action.contractName]: omitted, ...rest } = state\n    return rest\n  }\n\n  if (action.type === SET_CONTRACT_METADATA) {\n    return action.contractMetadata\n  }\n\n  return state\n}\n\nexport default contractMetadataReducer\n","import { Drizzle, generateStore } from \"@drizzle/store\"\nimport drizzleOptions from \"./drizzleOptions\"\nimport { contractEventNotifier, contractAddNotifier } from \"./middleware\"\n\nimport { todosReducer, appRootSaga } from \"./reducers/todos.js\"\nimport contractMetadataReducer from \"./reducers/contractMetadataReducer\"\n\nconsole.log(drizzleOptions.contracts)\n\nconst appReducers = {\n  todos: todosReducer,\n  contractMetadata: contractMetadataReducer\n}\nconst appSagas = [appRootSaga]\nconst appMiddlewares = [contractEventNotifier, contractAddNotifier]\n\nconst config = {\n  drizzleOptions,\n  appReducers,\n  appSagas,\n  appMiddlewares,\n  disableReduxDevTools: false // enable ReduxDevTools!\n}\nconst store = generateStore(config)\nconst drizzle = new Drizzle(drizzleOptions, store)\n\nexport default drizzle;\n","import { EventActions } from \"@drizzle/store\"\n\nexport const contractEventNotifier = store => next => action => {\n  if (action.type === EventActions.EVENT_FIRED) {\n    const contract = action.name\n    const contractEvent = action.event.event\n    const contractMessage = action.event.returnValues._message\n    const display = `${contract}(${contractEvent}): ${contractMessage}`\n\n    // interact with your service\n    console.log(\"Contract event fired\", display)\n  }\n  return next(action)\n}\n\nexport const contractAddNotifier = store => next => action => {\n  if (action.type === \"CONTRACT_INITIALIZED\") {\n    // interact with your service\n    console.log(\"Contract initialized fired\", action)\n  } else if (action.type === \"CONTRACT_INITIALIZING\") {\n    // interact with your service\n    console.log(\"Contract initializing fired\", action)\n  } else {\n    console.log(action.type)\n  }\n  return next(action)\n}\n","import React, { useState, useContext } from \"react\"\nimport {\n  Col,\n  Row,\n  Button,\n  FormGroup,\n  Input,\n  Container,\n  Navbar,\n  Table\n} from \"reactstrap\"\n\nimport \"./index.css\"\n\nimport { drizzleReactHooks } from \"@drizzle/react-plugin\"\nimport { newContextComponents } from \"@drizzle/react-components\"\nimport { Formik, Form, Field } from \"formik\"\n\nconst { ContractData } = newContextComponents\n\nconst styles = {\n  Navbar: {\n    backgroundColor: \"var(--color-dark-purple)\",\n    paddingLeft: \"50px\",\n    color: \"var(--color-gray-6)\",\n    fontStyle: \"italic\"\n  },\n  About: {\n    backgroundColor: \"var(--color-pastelle-blue)\",\n    padding: \"50px\",\n    color: \"var(--color-gray-6)\"\n  },\n  Contracts: {\n    backgroundColor: \"var(--color-pastelle-aqua)\",\n    padding: \"50px\",\n    color: \"var(--color-gray-6)\"\n  },\n  GetStarted: {\n    backgroundColor: \"var(--color-pastelle-pink)\",\n    padding: \"50px\",\n    color: \"var(--color-gray-1)\"\n  },\n  Bounties: {\n    backgroundColor: \"var(--color-pastelle-brown)\",\n    padding: \"50px\",\n    color: \"var(--color-gray-6)\"\n  },\n  a: { color: \"var(--color-gray-6)\" },\n  cellBreakWord: {\n    wordWrap: \"break-word\",\n    maxWidth: \"1px\"\n  }\n}\n\nconst BountyCreateForm = ({ handleCreateDeal }) => (\n  <Formik\n    initialValues={{\n      _beneficiary: \"\",\n      _bounty: \"\",\n      _expiryBlock: \"\",\n      _targetContract: \"\",\n      _targetCallData: \"\",\n      _targetResponse: \"\"\n    }}\n    validate={values => {\n      const errors = {}\n      return errors\n    }}\n    onSubmit={(values, { setSubmitting }) => {\n      handleCreateDeal(values)\n      setSubmitting(false)\n    }}\n  >\n    {({ isSubmitting }) => (\n      <Form>\n        <FormGroup>\n          <Field\n            type=\"text\"\n            name=\"_beneficiary\"\n            placeholder=\"Beneficiary\"\n            as={Input}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Field\n            type=\"number\"\n            name=\"_bounty\"\n            placeholder=\"Bounty (ETH)\"\n            as={Input}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Field\n            type=\"text\"\n            name=\"_expiryBlock\"\n            placeholder=\"Expiry Block\"\n            as={Input}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Field\n            type=\"text\"\n            name=\"_targetContract\"\n            placeholder=\"Target Contract (address)\"\n            as={Input}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Field\n            type=\"text\"\n            name=\"_targetCallData\"\n            placeholder=\"Target Call Data (bytes)\"\n            as={Input}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Field\n            type=\"text\"\n            name=\"_targetResponse\"\n            placeholder=\"Target Response (bytes)\"\n            as={Input}\n          />\n        </FormGroup>\n        <Button type=\"submit\" disabled={isSubmitting}>\n          Create Bounty\n        </Button>\n      </Form>\n    )}\n  </Formik>\n)\n\nconst BountyFilterForm = () => (\n  <Formik\n    initialValues={{ minBounty: \"\", contract: \"\" }}\n    validate={values => {}}\n    onSubmit={(values, { setSubmitting }) => {\n      console.log(values)\n      setSubmitting(false)\n    }}\n  >\n    {({ isSubmitting }) => (\n      <Form>\n        <FormGroup>\n          <Field\n            type=\"number\"\n            name=\"minBounty\"\n            placeholder=\"Minimum Bounty (ETH)\"\n            as={Input}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Field\n            type=\"text\"\n            name=\"contract\"\n            placeholder=\"Contract\"\n            as={Input}\n          />\n        </FormGroup>\n        <Button type=\"submit\" disabled={isSubmitting}>\n          Submit\n        </Button>\n      </Form>\n    )}\n  </Formik>\n)\n\nconst BountyTable = ({\n  deals,\n  handleSettleDeal,\n  handleRefundDeal,\n  blockNumber\n}) => {\n  console.log(blockNumber)\n  return (\n    <>\n      <h4>Current Block: {blockNumber}</h4>\n      <Table style={{ width: \"100%\", borderCollapse: \"collapse\" }} dark>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>State</th>\n            <th>Creator</th>\n            <th>Contract</th>\n            <th>Call Data</th>\n            <th>Response Data</th>\n            <th>Expiry</th>\n            <th>Bounty</th>\n            <th>Settle</th>\n            <th>Refund</th>\n          </tr>\n        </thead>\n        <tbody>\n          {deals.map((deal, idx) => {\n            const expired = deal?.expiryBlock <= blockNumber\n            return (\n              <tr key={idx}>\n                <th scope=\"row\">{idx}</th>\n                <td style={styles.cellBreakWord}>\n                  {deal?.settled ? \"Settled\" : expired ? \"Expired\" : \"Active\"}\n                </td>\n                <td style={styles.cellBreakWord}>{deal?.creator}</td>\n                <td style={styles.cellBreakWord}>{deal?.targetContract}</td>\n                <td style={styles.cellBreakWord}>{deal?.targetCallData}</td>\n                <td style={styles.cellBreakWord}>{deal?.targetResponse}</td>\n                <td style={styles.cellBreakWord}>{deal?.expiryBlock}</td>\n                <td style={styles.cellBreakWord}>{deal?.bounty}</td>\n                <td style={styles.cellBreakWord}>\n                  <Button\n                    value={idx}\n                    onClick={handleSettleDeal}\n                    disabled={deal?.settled || expired}\n                  >\n                    Settle\n                  </Button>\n                </td>\n                <td style={styles.cellBreakWord}>\n                  <Button\n                    value={idx}\n                    onClick={handleRefundDeal}\n                    disabled={deal?.settled || !expired}\n                  >\n                    Refund\n                  </Button>\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </Table>\n    </>\n  )\n}\n\nconst HomeAbout = () => (\n  <div>\n    <h1>About</h1>\n    <p>\n      Welcome to the first general purpose collusion contract on Ethereum! ETH\n      Collude is a simple contract that works by defining “bounties” with a\n      target beneficiary, contract and result. At any point in time any user (or\n      contract!) can trigger the bounty. If the bounty’s target contract returns\n      the target result, the beneficiary will be paid out the result. In\n      addition, bounties have an expiryBlock after which they can no longer be\n      triggered (and can be refunded to their creator).\n      <br />\n      <br />\n      While this mechanism is particularly interesting in the context of\n      trust-less multi-party collusion (or coordination), one can imagine a\n      variety of other use cases as well. The ETH Collude contract is agnostic\n      to the target contract’s interface which makes it particularly useful. One\n      can build adapter contracts on-chain to simplify the interface or opt to\n      compute the BaseCollude inputs off-chain (marginally cheaper gas cost but\n      less practical).\n      <br />\n      <br />\n      Telegram: @leovigna\n    </p>\n  </div>\n)\n\nconst HomeContracts = () => (\n  <div>\n    <h1>Contracts</h1>\n    <p>\n      Listed below are the contracts that enable the ETH Collude system. The{\" \"}\n      <b>BaseCollude.sol</b> contract is the only necessary component. It uses\n      raw bytes as inputs for the args, and target response. Other\n      &quot;adapters&quot; can enable automatic parsing of arguments to simplify\n      interfacing with the BaseCollude contract. We use the TestCollude.sol\n      contract as an example of this as the contract parses the target response\n      as an integer.\n    </p>\n    <Row>\n      <Col>\n        <a style={styles.a} href=\"contracts/BaseCollude.sol\">\n          BaseCollude.sol\n        </a>\n      </Col>\n      |\n      <Col>\n        <a style={styles.a} href=\"github.com\">\n          Ropsten\n        </a>\n      </Col>\n      |\n      <Col>\n        <a style={styles.a} href=\"#\">\n          Mainnet (TBD)\n        </a>\n      </Col>\n    </Row>\n    <Row>\n      <Col>\n        <a style={styles.a} href=\"contracts/SimpleColludeTarget.sol\">\n          SimpleColludeTarget.sol\n        </a>\n      </Col>\n      |\n      <Col>\n        <a style={styles.a} href=\"github.com\">\n          Ropsten\n        </a>\n      </Col>\n      |\n      <Col>\n        <a style={styles.a} href=\"#\">\n          Mainnet (TBD)\n        </a>\n      </Col>\n    </Row>\n  </div>\n)\n\nconst Home = ({ deals, BaseCollude, currentBlock }) => {\n  console.log(currentBlock)\n  const handleCreateDeal = ({\n    _beneficiary,\n    _bounty,\n    _expiryBlock,\n    _targetContract,\n    _targetCallData,\n    _targetResponse\n  }) => {\n    console.log(_beneficiary)\n    BaseCollude.methods\n      .createDeal(\n        _beneficiary,\n        _expiryBlock,\n        _targetContract,\n        _targetCallData,\n        _targetResponse\n      )\n      .send({ value: _bounty })\n      .on(\"transactionHash\", function(hash) {\n        console.log(hash)\n      })\n  }\n\n  const handleSettleDeal = event => {\n    event.preventDefault()\n    const dealIdx = parseInt(event.target.value)\n    BaseCollude.methods.settleDeal(dealIdx).send()\n  }\n\n  const handleRefundDeal = event => {\n    event.preventDefault()\n    const dealIdx = parseInt(event.target.value)\n    BaseCollude.methods.refundDeal(dealIdx).send()\n  }\n\n  return (\n    <div className=\"Home\">\n      <Navbar style={styles.Navbar} expand=\"md\">\n        <h1>ETH Collude</h1>\n      </Navbar>\n      <Container fluid>\n        <Row>\n          <Col style={styles.About} xs=\"6\" sm=\"6\">\n            <HomeAbout />\n          </Col>\n          <Col style={styles.Contracts} xs=\"6\" sm=\"6\">\n            <HomeContracts />\n          </Col>\n        </Row>\n        <Row>\n          <Col style={styles.GetStarted} xs=\"12\" sm=\"12\">\n            <h1>Get Started</h1>\n            <p>\n              Disclosure: Please use responsibly. I recommend initially using\n              Ropsten as creating a bounty costs ETH.\n              <br />\n              <br />\n              Create your own collusion contract! Or try triggering some of the\n              contract’s in the “Bounties” section. (Note that bounties are paid\n              to the “beneficiary” address and that there is no reward for\n              triggering a bounty).\n            </p>\n            <BountyCreateForm handleCreateDeal={handleCreateDeal} />\n          </Col>\n          <Col style={styles.Bounties} xs=\"12\" sm=\"12\">\n            <h1>Live Bounties</h1>\n            <p>Browse all created bounties.</p>\n            <BountyTable\n              deals={deals}\n              handleSettleDeal={handleSettleDeal}\n              handleRefundDeal={handleRefundDeal}\n              blockNumber={currentBlock.number}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default () => {\n  const { useCacheCall, drizzle } = drizzleReactHooks.useDrizzle()\n  const drizzleState = drizzleReactHooks.useDrizzleState(drizzleState => ({\n    drizzleStatus: drizzleState.drizzleStatus,\n    currentBlock: drizzleState.currentBlock\n  }))\n\n  // Update Block\n  if (drizzle.web3) {\n    const { web3 } = drizzle\n    web3.eth\n      .getBlockNumber()\n      .then(blockNumber => {\n        console.log(`Block ${blockNumber}`)\n        return web3.eth.getBlock(blockNumber)\n      })\n      .then(block => {\n        drizzle.store.dispatch({\n          type: \"BLOCK_PROCESSING\",\n          drizzle,\n          block,\n          web3\n        })\n      })\n  }\n\n  return (\n    <Home\n      deals={useCacheCall([\"BaseCollude\"], call => {\n        let dealsCount = useCacheCall(\"BaseCollude\", \"dealsCount\")\n        if (!dealsCount) {\n          return []\n        }\n        dealsCount = parseInt(dealsCount) || 0\n        const deals = [...Array(dealsCount).keys()].map((_, idx) => {\n          const deal = call(\"BaseCollude\", \"deals\", idx)\n          return deal\n        })\n\n        return deals || []\n      })}\n      currentBlock={drizzleState.currentBlock}\n      BaseCollude={drizzle.contracts.BaseCollude}\n    />\n  )\n}\n","import React, { Component } from \"react\"\nimport { HashRouter, Route, Switch } from \"react-router-dom\"\n\n//import { Drizzle } from \"@drizzle/store\"\nimport { DrizzleContext, drizzleReactHooks } from \"@drizzle/react-plugin\"\n\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"./App.css\"\n\nimport drizzle from \"./store\"\n\nimport Home from \"./components/Home\"\n\n// Containers\n//const Home = React.lazy(() => import(\"./components/Home\"))\n\n\nconst loading = () => (\n  <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>\n)\n\nclass App extends Component {\n  render() {\n    return (\n      <drizzleReactHooks.DrizzleProvider drizzle={drizzle}>\n          <drizzleReactHooks.Initializer\n            error=\"There was an error.\"\n            loadingContractsAndAccounts=\"Also still loading.\"\n            loadingWeb3=\"Still loading.\">\n        <HashRouter>\n          <React.Suspense fallback={loading()}>\n            <Switch>\n              <Route\n                path=\"/\"\n                name=\"Home\"\n                render={props => <Home {...props} />}\n              />\n            </Switch>\n          </React.Suspense>\n        </HashRouter>\n        </drizzleReactHooks.Initializer>\n      </drizzleReactHooks.DrizzleProvider>\n    )\n  }\n}\n\nexport default App\n","/* eslint no-use-before-define: 0 */\n/* eslint no-param-reassign: 0 */\n/* eslint no-console: 0 */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}